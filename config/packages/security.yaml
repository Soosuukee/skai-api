security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    App\Entity\Provider:
      algorithm: auto
    App\Entity\Client:
      algorithm: auto
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      id: App\Security\UserProvider

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # Firewall pour le login JWT
    login:
      pattern: ^/api/v1/auth/login
      stateless: true
      json_login:
        check_path: /api/v1/auth/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    # Firewall pour les routes publiques (images, listes de base)
    public:
      pattern: ^/api/v1/(images|countries|jobs|languages|tags|hard-skills|soft-skills|providers/filter)
      security: false

    # Firewall principal pour l'API protégée
    api:
      pattern: ^/api/v1
      stateless: true
      provider: app_user_provider
      jwt: ~

    # Routes d'authentification personnalisées (publiques)
    auth_custom:
      pattern: ^/api/v1/auth/(register|logout|me)
      security: false

  # Contrôle d'accès basé sur les rôles et chemins
  access_control:
    # Routes d'authentification - publiques
    - { path: ^/api/v1/auth, roles: PUBLIC_ACCESS }

    # Routes publiques - pas d'authentification requise
    - {
        path: ^/api/v1/(images|countries|jobs|languages|tags|hard-skills|soft-skills),
        roles: PUBLIC_ACCESS,
      }

    # Routes de lecture publiques pour les sous-ressources des providers (plus spécifique en premier)
    - {
        path: ^/api/v1/providers/.*/(experiences|educations|services|articles),
        methods: [GET],
        roles: PUBLIC_ACCESS,
      }

    # Routes de lecture publiques pour certaines ressources
    - {
        path: ^/api/v1/(providers|clients|services|articles),
        methods: [GET],
        roles: PUBLIC_ACCESS,
      }

    # Autres routes de lecture - authentification requise
    - {
        path: ^/api/v1/(reviews|bookings|requests),
        methods: [GET],
        roles: IS_AUTHENTICATED,
      }

    # Routes d'écriture - authentification requise
    - {
        path: ^/api/v1/(providers|clients|services|articles|reviews|bookings|requests),
        methods: [POST, PUT, PATCH, DELETE],
        roles: IS_AUTHENTICATED,
      }

    # Routes d'upload d'images - authentification requise
    - {
        path: ^/api/v1/(providers|clients|services|articles)/.*/.*image,
        roles: IS_AUTHENTICATED,
      }

    # Route /me - authentification requise
    - { path: ^/api/v1/me$, roles: IS_AUTHENTICATED }

    # Toutes les autres routes API - authentification requise
    - { path: ^/api/v1, roles: IS_AUTHENTICATED }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
